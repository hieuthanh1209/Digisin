/**
 * Toast notification component
 * Reusable across all dashboards
 */

class ToastManager {
  constructor() {
    this.container = null;
    this.toastCounter = 0;
    this.init();
  }

  // Initialize toast container
  init() {
    if (!document.getElementById('toast-container')) {
      this.container = document.createElement('div');
      this.container.id = 'toast-container';
      this.container.className = 'toast-container position-fixed top-0 end-0 p-3';
      this.container.style.zIndex = '1055';
      document.body.appendChild(this.container);
    } else {
      this.container = document.getElementById('toast-container');
    }
  }

  // Show toast notification
  show(message, type = 'info', duration = 4000) {
    const toastId = `toast-${++this.toastCounter}`;
    
    const toast = document.createElement('div');
    toast.id = toastId;
    toast.className = `toast align-items-center text-white bg-${this.getBootstrapColor(type)} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          <i class="${this.getIcon(type)} me-2"></i>
          ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;

    this.container.appendChild(toast);    // Initialize Bootstrap toast
    // Check if bootstrap is available as a global or needs to be imported
    let bsToast;
    if (typeof bootstrap !== 'undefined') {
      bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: duration
      });
    } else {
      console.error('Bootstrap not found. Toast may not work properly.');
      // Fallback basic functionality
      toast.style.display = 'block';
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, duration);
      return toastId;
    }

    // Show toast
    bsToast.show();

    // Clean up after toast is hidden
    toast.addEventListener('hidden.bs.toast', () => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    });

    return toastId;
  }

  // Get Bootstrap color class based on type
  getBootstrapColor(type) {
    const colors = {
      success: 'success',
      error: 'danger',
      warning: 'warning',
      info: 'primary'
    };
    return colors[type] || 'primary';
  }

  // Get icon based on type
  getIcon(type) {
    const icons = {
      success: 'fas fa-check-circle',
      error: 'fas fa-times-circle',
      warning: 'fas fa-exclamation-triangle',
      info: 'fas fa-info-circle'
    };
    return icons[type] || 'fas fa-info-circle';
  }

  // Convenience methods
  success(message, duration) {
    return this.show(message, 'success', duration);
  }

  error(message, duration) {
    return this.show(message, 'error', duration);
  }

  warning(message, duration) {
    return this.show(message, 'warning', duration);
  }

  info(message, duration) {
    return this.show(message, 'info', duration);
  }

  // Hide specific toast  hide(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
      if (typeof bootstrap !== 'undefined') {
        const bsToast = bootstrap.Toast.getInstance(toast);
        if (bsToast) {
          bsToast.hide();
        }
      } else if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }
  }
  // Hide all toasts
  hideAll() {
    const toasts = this.container.querySelectorAll('.toast');
    toasts.forEach(toast => {
      if (typeof bootstrap !== 'undefined') {
        const bsToast = bootstrap.Toast.getInstance(toast);
        if (bsToast) {
          bsToast.hide();
        }
      } else if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    });
  }
}

// Create global instance
window.Toast = new ToastManager();

// Export for modules
export default ToastManager; 